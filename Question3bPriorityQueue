class Question3bPriorityQueue {

    private List<Integer> heap;

    public Question3bPriorityQueue() {
        heap = new ArrayList<>();
    }

    public void push(int val) {
        heap.add(val);
        shiftUp(heap.size() - 1);
    }

    public int pop() {
        if (isEmpty()) {
            throw new NoSuchElementException("Heap is empty");
        }

        int maxValue = heap.get(0);
        int lastValue = heap.remove(heap.size() - 1);

        if (!isEmpty()) {
            heap.set(0, lastValue);
            shiftDown(0);
        }

        return maxValue;
    }

    public boolean isEmpty() {
        return heap.isEmpty();
    }

    private void shiftUp(int index) {
        int parent = (index - 1) / 2;

        while (index > 0 && heap.get(index) > heap.get(parent)) {
            swap(index, parent);
            index = parent;
            parent = (index - 1) / 2;
        }
    }

    private void shiftDown(int index) {
        int leftChild = index * 2 + 1;
        int rightChild = index * 2 + 2;
        int largest = index;

        if (leftChild < heap.size() && heap.get(leftChild) > heap.get(largest)) {
            largest = leftChild;
        }

        if (rightChild < heap.size() && heap.get(rightChild) > heap.get(largest)) {
            largest = rightChild;
        }

        if (largest != index) {
            swap(index, largest);
            shiftDown(largest);
        }
    }

    private void swap(int i, int j) {
        int temp = heap.get(i);
        heap.set(i, heap.get(j));
        heap.set(j, temp);
    }


    public static void main(String[] args) {
        int[] arr= [6,1,2,4]
        Question3bPriorityQueue q= new Question3bPriorityQueue();
        q.push(6);
        q.push(1);
        q.push(2);
        q.push(4);

        for(int i=0;i<q.heap.size();i++){
            System.out.println(q.heap.get(i));
        }
    }
}